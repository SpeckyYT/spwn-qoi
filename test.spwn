extract import "lib.spwn"

start_time = $.time()

file_bytes = $.readfile("E:/Roba Specky/SPWN/qoi/qoi_test_images/testcard_rgba.qoi")

$.print(f"Read file: {$.time() - start_time}s")

output = @qoi::decode(file_bytes, true, false)
// dbg output

// scaling = 200 / match output.height {
//     >output.width => output.height,
//     _ => output.width,
// }
scaling = 0.5

// image_flat = output.image.flatten()

red_color = ?c
// red_color.set(@chroma::rgb8(255,0,0))

rgb_to_hsv = (r: @int, g: @int, b: @int) -> [@int, @float, @float] {
    rz = r / 255.0
    gz = g / 255.0
    bz = b / 255.0

    mut min = 1
    for c in [ rz, gz, bz ] { if c < min { min = c } }
    mut max = 0
    for c in [ rz, gz, bz ] { if c > max { max = c } }

    diff = max - min
    diffc = c => (max - c) / 6.0 / diff + 1.0 / 2.0

    let h = 0.0
    let s = 0.0
    let v = max as @float

    if diff != 0 {
        s = diff / v
        rr = diffc(rz)
        gg = diffc(gz)
        bb = diffc(bz)

        if rz == v {
            h = bb - gg
        } else if gz == v {
            h = (1.0 / 3.0) + rr - bb
        } else if bz == v {
            h = (2.0 / 3.0) + gg - rr
        }
        h = (h % 1 + 1) % 1
    }
    return [
        (h * 360) as @int,
        s,
        v,
    ]
}

for x in 0..output.width {
    for y in 0..output.height {
        color = output.image[x][y] // image_flat[x * output.width + y]

        if color.a == 0 { continue }

        // rgba_color = @chroma::from_rgb8(color.r, color.g, color.b, color.a)
        // hue = rgba_color.h360()
        // saturation = rgba_color.s()
        // value = rgba_color.v()

        [ hue, saturation, value ] = rgb_to_hsv(color.r, color.g, color.b)

        $.add(obj {
            OBJ_ID: 211,
            X: x * 30 * scaling + 90,
            Y: (output.height - y - 1) * 30 * scaling + 90,
            SCALING: scaling,
            HVS_ENABLED: true,
            HVS: f"{hue}a{saturation}a{value}a0a0",
            COLOR: red_color,
        })
    }
}
